import {catchAsync} from "../utils/catchAsync";
import {pick} from "../utils/pick";
import axios from "axios";

let state = "";

export const login = catchAsync(async (req, res) => {
    const {client_id, tab_id, session_code} = pick(req.query, ["client_id", "tab_id", "session_code"]);
    //
    const config = {
        headers: req.headers,
        maxRedirects: 0,
        validateStatus: status => {
            return status === 200 || status === 302 || status === 301;
        }
    };

    const response = await axios
        .get(`http://keycloak:8080/realms/phg/broker/PreferredNet/login?client_id=${client_id}&tab_id=${tab_id}&session_code=${session_code}`,
            config);

    const locationHeader = response.headers['location'];
    if (locationHeader) {
        const urlParams = new URLSearchParams(locationHeader.substring(locationHeader.indexOf('?') + 1));
        state = urlParams.get('RelayState');
    }
    console.log('current state:', state);
    res.redirect(301, locationHeader);
});


export const ssoCallBack = catchAsync(async (req, res) => {
    //
    console.log('req - h', req.headers)
    console.log('req', req.body)
    const {SAMLResponse} = req.body;

    const amendedRes = "PFJlc3BvbnNlIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIKICAgICAgICAgIElEPSJqbEY3U1poYlltZFJQWVpITUwxVCIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMjQtMDMtMjJUMDQ6Mjg6MTMuNTQzWiIKICAgICAgICAgIERlc3RpbmF0aW9uPSJodHRwczovL2RldjItYXV0aC1hbWljYWNvcnAuc3VyZ2UudG9vbHMvcmVhbG1zL3BoZy9icm9rZXIvUHJlZmVycmVkTmV0L2VuZHBvaW50IgogICAgICAgICAgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgSW5SZXNwb25zZVRvPSJfN2ViNWE3ZGMtNTBiZi00Njc1LWFhZWMtMGE5YTA5NzYxM2U1Ij4KICAgIDxzYW1sOklzc3Vlcj5odHRwczovL1ByZWZlcnJlZE5ldC5uZXQ8L3NhbWw6SXNzdWVyPgogICAgPFN0YXR1cz4KICAgICAgICA8U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+CiAgICA8L1N0YXR1cz4KICAgIDxzYW1sOkFzc2VydGlvbiBWZXJzaW9uPSIyLjAiIElEPSJfN2ViNWE3ZGMtNTBiZi00Njc1LWFhZWMtMGE5YTA5NzYxM2U1IiBJc3N1ZUluc3RhbnQ9IjIwMjQtMDMtMjJUMDQ6Mjg6MTMuNTQzWiI+CiAgICAgICAgPHNhbWw6SXNzdWVyPmh0dHBzOi8vUHJlZmVycmVkTmV0Lm5ldDwvc2FtbDpJc3N1ZXI+CiAgICAgICAgPFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CiAgICAgICAgICAgIDxTaWduZWRJbmZvPgogICAgICAgICAgICAgICAgPENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KICAgICAgICAgICAgICAgIDxTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KICAgICAgICAgICAgICAgIDxSZWZlcmVuY2UgVVJJPSIjXzdlYjVhN2RjLTUwYmYtNDY3NS1hYWVjLTBhOWEwOTc2MTNlNSI+CiAgICAgICAgICAgICAgICAgICAgPFRyYW5zZm9ybXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CiAgICAgICAgICAgICAgICAgICAgPC9UcmFuc2Zvcm1zPgogICAgICAgICAgICAgICAgICAgIDxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8RGlnZXN0VmFsdWU+VnBYaWswY3B5SXV6alR6dTdIdFowYUhDZ1Q1VS9VeDNSNDZTalE4RWUvQT08L0RpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9SZWZlcmVuY2U+CiAgICAgICAgICAgIDwvU2lnbmVkSW5mbz4KICAgICAgICAgICAgPFNpZ25hdHVyZVZhbHVlPgogICAgICAgICAgICAgICAgZkY1ZFFLa0daWXp3VnR2UC9YR245c3VtZExMdWhuVWxHcGF5K0tabUJIR1FrS0hwSnRMY0NOaENpeHAwWUdFN2JhRlBGcVhYd2xzdC8zVXdTSDUrbkpxRFZXekRnSmdyWENnT3RpL2VFdWo0VjMyZytOaUV0Zis0ZWdlb0JHeXB1aUFKc2t1cnpwWjZISm1FaDJ1UDBXYmhSZ1dpV2h0a0RMZWx0N1VDeHFpc2dXOVVSeGZFV3JYVUloNXFpSjFMVjdFNjlMWXhBRGJNU1dNUW1wVVBuM2huV01NVW1iMThqRzQzcjd5YjVCMW9LVjVYNTlKQmVWRDdTREJDK3YzVldQNTlZZzlVVS92UmNNajJBblBrSmttLzVZTjYvZkMyYjNaYWtLNWdoNGpRY0V3amcwTFA2eVpDTS9nZ0pYc0dTL1UwUnduSVVuRitab3BSVHh3MDdnPT0KICAgICAgICAgICAgPC9TaWduYXR1cmVWYWx1ZT4KICAgICAgICAgICAgPEtleUluZm8+CiAgICAgICAgICAgICAgICA8WDUwOURhdGE+CiAgICAgICAgICAgICAgICAgICAgPFg1MDlDZXJ0aWZpY2F0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgTUlJRVNUQ0NBekdnQXdJQkFnSUpBTHFNR1VSYnFRWFlNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1JRzVNUXN3Q1FZRFZRUUdFd0pWVXpFUk1BOEdBMVVFQ0F3SVNXeHNhVzV2YVhNeEVEQU9CZ05WQkFjTUIwTm9hV05oWjI4eEpEQWlCZ05WQkFvTUcxQnlaV1psY25KbFpDQkliM1JsYkNCSGNtOTFjQ3dnU1c1akxqRUxNQWtHQTFVRUN3d0NTVlF4SnpBbEJnTlZCQU1NSG5CeVpXWmxjbkpsWkdodmRHVnNjeTEzWldKaWJXRnpiMjR0YzJGdGJERXBNQ2NHQ1NxR1NJYjNEUUVKQVJZYWFYUm9aV3h3UUhCeVpXWmxjbkpsWkdodmRHVnNjeTVqYjIwd0lCY05NakF3TVRFME1qTXpOVFUyV2hnUE1qQTFNREF5TWpVeU16TTFOVFphTUlHNU1Rc3dDUVlEVlFRR0V3SlZVekVSTUE4R0ExVUVDQXdJU1d4c2FXNXZhWE14RURBT0JnTlZCQWNNQjBOb2FXTmhaMjh4SkRBaUJnTlZCQW9NRzFCeVpXWmxjbkpsWkNCSWIzUmxiQ0JIY205MWNDd2dTVzVqTGpFTE1Ba0dBMVVFQ3d3Q1NWUXhKekFsQmdOVkJBTU1IbkJ5WldabGNuSmxaR2h2ZEdWc2N5MTNaV0ppYldGemIyNHRjMkZ0YkRFcE1DY0dDU3FHU0liM0RRRUpBUllhYVhSb1pXeHdRSEJ5WldabGNuSmxaR2h2ZEdWc2N5NWpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREp3aEZUNTk3SEJyTG9LSjlvUitBUXdrR1RNd0diSkd0VHdWRVh4ajI2VlRxV3Y1VzdGSkV6elQ5NC84TEZaalB0MUp6ZDhzYlVHa2x6bU9lczdFcG1YcUtCYnA0clV1aTl6T3dSNEdQY0tMOUtGL3ZQTHpHdEFQcWJKR1kyQVB2a3lkaFlkL0piUUVuL3hOTFkvZWVvU0RDYXVPeHJ0NTJsaGtFbzZoMkxJcWR5UUZ5UERYazVKNnBzcSs2dkVZN3Q3dXEvS3RiU0ZGL2xhWTJ0MlFXdXVrNTNGOHRqQk9lemYvSFMwd3F3Vm4yVmRRdm80b2RSQXJUanBvWFp4M05ZTCtvZURyNXo3RUdRWHBQU3k5RjFpdVJkRUh3amIwdHNLQzhOajFOZ0ROVWVZbnBicHl0ODdldW1TM3dWNTdGOHpPUmJzNnZCV0xPUlUrOStKSVNkQWdNQkFBR2pVREJPTUIwR0ExVWREZ1FXQkJSYXY1V1lqV1hHV3RkRjVpR2NvODRMQStRRnJUQWZCZ05WSFNNRUdEQVdnQlJhdjVXWWpXWEdXdGRGNWlHY284NExBK1FGclRBTUJnTlZIUk1FQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJkeTl4U1VrREZxKzFKVjVPSUI1elJNZHg1dEw4TUF0KzVFelVIdkFFNXlXMTN2RDZmRGpaaDdxNVRHYUp2VHJxV1VUblJkRU43TEwyaWR5SUFIempPK3c2dmpROUE0NVFNNG52dmZzVllWaER2cFVrc3VDT3dqQ1B0TytUSDF2VjBTcmxnK2loVWROaFAzNjdKZHNtaDZWZ1NucGU2U0QwcG03U0R4YklZdmVVT0xrSWxxUEV2YXUwL1JwaFlEcytkRE9lMmFlYVVRS2loVGhmNDloNCs0Z05pSm8yK3cvNVJvR2ZUc0xnZzJFMm5OUzg5U1ZrcWtTb2FibWlrc08zNjgwY1IxaTZucUhDeksyclNERGVKempUTE1KL3BhdVBmMmpmdE11U0NKdVNOWWQxRmQ2ZjNIS3hlSlE4NHBsdVpOcC93N2djWVpsaVUzQmYyM3VscgogICAgICAgICAgICAgICAgICAgIDwvWDUwOUNlcnRpZmljYXRlPgogICAgICAgICAgICAgICAgPC9YNTA5RGF0YT4KICAgICAgICAgICAgPC9LZXlJbmZvPgogICAgICAgIDwvU2lnbmF0dXJlPgogICAgICAgIDxzYW1sOlN1YmplY3Q+CiAgICAgICAgICAgIDxzYW1sOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIj5oYXJpbmR1QHN1cmdlLmdsb2JhbAogICAgICAgICAgICA8L3NhbWw6TmFtZUlEPgogICAgICAgICAgICA8c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+CiAgICAgICAgICAgICAgICA8c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YQogICAgICAgICAgICAgICAgICAgICAgICBSZWNpcGllbnQ9Imh0dHBzOi8vZGV2Mi1hdXRoLWFtaWNhY29ycC5zdXJnZS50b29scy9yZWFsbXMvcGhnL2Jyb2tlci9QcmVmZXJyZWROZXQvZW5kcG9pbnQiCiAgICAgICAgICAgICAgICAgICAgICAgIEluUmVzcG9uc2VUbz0ic3VyZ2UiIE5vdE9uT3JBZnRlcj0iMjAyNC0wMy0yMlQwNDo0MzoxMy41NDNaIi8+CiAgICAgICAgICAgIDwvc2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uPgogICAgICAgIDwvc2FtbDpTdWJqZWN0PgogICAgICAgIDxzYW1sOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDI0LTAzLTIyVDA0OjI4OjEzLjU0M1oiIE5vdE9uT3JBZnRlcj0iMjAyNC0wMy0yMlQwNDo0MzoxMy41NDNaIj4KICAgICAgICAgICAgPHNhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj4KICAgICAgICAgICAgICAgIDxzYW1sOkF1ZGllbmNlPmh0dHBzOi8vZGV2Mi1hdXRoLWFtaWNhY29ycC5zdXJnZS50b29scy9yZWFsbXMvcGhnPC9zYW1sOkF1ZGllbmNlPgogICAgICAgICAgICA8L3NhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj4KICAgICAgICA8L3NhbWw6Q29uZGl0aW9ucz4KICAgICAgICA8c2FtbDpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjQtMDMtMjJUMDQ6Mjg6MTMuNTQzWiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXNzaW9uSW5kZXg9Il83ZWI1YTdkYy01MGJmLTQ2NzUtYWFlYy0wYTlhMDk3NjEzZTUiPgogICAgICAgICAgICA8c2FtbDpBdXRobkNvbnRleHQ+CiAgICAgICAgICAgICAgICA8c2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3Nlczp1bnNwZWNpZmllZAogICAgICAgICAgICAgICAgPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPgogICAgICAgICAgICA8L3NhbWw6QXV0aG5Db250ZXh0PgogICAgICAgIDwvc2FtbDpBdXRoblN0YXRlbWVudD4KICAgICAgICA8c2FtbDpBdHRyaWJ1dGVTdGF0ZW1lbnQ+CiAgICAgICAgICAgIDxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJFbWFpbCIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+CiAgICAgICAgICAgICAgICA8c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHNkOnN0cmluZyI+aGFyaW5kdUBzdXJnZS5nbG9iYWw8L3NhbWw6QXR0cmlidXRlVmFsdWU+CiAgICAgICAgICAgIDwvc2FtbDpBdHRyaWJ1dGU+CiAgICAgICAgICAgIDxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJGaXJzdF9OYW1lIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj4KICAgICAgICAgICAgICAgIDxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4c2Q6c3RyaW5nIj5IYXJpbmR1PC9zYW1sOkF0dHJpYnV0ZVZhbHVlPgogICAgICAgICAgICA8L3NhbWw6QXR0cmlidXRlPgogICAgICAgICAgICA8c2FtbDpBdHRyaWJ1dGUgTmFtZT0icHJvcGVydGllcyIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+CiAgICAgICAgICAgICAgICA8c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHNkOnN0cmluZyI+UEhHVEVTVDwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT4KICAgICAgICAgICAgPC9zYW1sOkF0dHJpYnV0ZT4KICAgICAgICA8L3NhbWw6QXR0cmlidXRlU3RhdGVtZW50PgogICAgPC9zYW1sOkFzc2VydGlvbj4KPC9SZXNwb25zZT4K";
    // Prepare form data payload for Axios request to Keycloak
    const formData = new URLSearchParams();
    formData.append('SAMLResponse', amendedRes);
    formData.append('RelayState', state);

    console.log('formData ', formData)
    try {
        const response = await axios.post('http://keycloak:8080/realms/phg/broker/PreferredNet/endpoint', formData, {
                headers: req.headers
            }
        );

        console.log('response headers', response.headers)
        console.log('response data', response.data)
        // Forward Keycloak response to client
        res.headers = response.headers;
        res.status(response.status).send(response?.data);
    } catch (e) {
        console.log('error', e);
        if (e?.response?.headers) {
            res.headers = e.response.headers;
        }

        res.status(e?.response.status).send(e.response.data);
    }

});
