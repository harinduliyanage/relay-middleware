import {catchAsync} from "../utils/catchAsync";
import {pick} from "../utils/pick";
import axios from "axios";

let state = "";

export const login = catchAsync(async (req, res) => {
    const {client_id, tab_id, session_code} = pick(req.query, ["client_id", "tab_id", "session_code"]);
    //
    const config = {
        headers: req.headers,
        maxRedirects: 0,
        validateStatus: status => {
            return status === 200 || status === 302 || status === 301;
        }
    };

    const response = await axios
        .get(`http://keycloak:8080/realms/phg/broker/PreferredNet/login?client_id=${client_id}&tab_id=${tab_id}&session_code=${session_code}`,
            config);

    const locationHeader = response.headers['location'];
    if (locationHeader) {
        const urlParams = new URLSearchParams(locationHeader.substring(locationHeader.indexOf('?') + 1));
        state = urlParams.get('RelayState');
    }
    console.log('current state:', state);
    res.redirect(301, locationHeader);
});


export const ssoCallBack = catchAsync(async (req, res) => {
    //
    console.log('req - h', req.headers)
    console.log('req', req.body)
    const {SAMLResponse} = req.body;
    // Prepare form data payload for Axios request to Keycloak
    const formData = new URLSearchParams();
    formData.append('SAMLResponse', SAMLResponse ? SAMLResponse : "PFJlc3BvbnNlIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiB4bWxuczpzYW1sPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBJRD0iYzNDMW1MemhkNDZySmNReEZvbWYiIFZlcnNpb249IjIuMCIgSXNzdWVJbnN0YW50PSIyMDI0LTAzLTIwVDA3OjUyOjU3LjQzMzVaIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9kZXYyLWF1dGgtYW1pY2Fjb3JwLnN1cmdlLnRvb2xzL3JlYWxtcy9waGcvYnJva2VyL1ByZWZlcnJlZE5ldC9lbmRwb2ludCIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI+PHNhbWw6SXNzdWVyPmh0dHBzOi8vUHJlZmVycmVkTmV0Lm5ldDwvc2FtbDpJc3N1ZXI+PFN0YXR1cz48U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIiAvPjwvU3RhdHVzPjxzYW1sOkFzc2VydGlvbiBWZXJzaW9uPSIyLjAiIElEPSJfYjY1MDY3NjgtNGExZS00NmYzLTk0NWEtYTQwNWJjMTI5Mjc3IiBJc3N1ZUluc3RhbnQ9IjIwMjQtMDMtMjBUMDc6NTI6NTcuNDMzNVoiPjxzYW1sOklzc3Vlcj5odHRwczovL1ByZWZlcnJlZE5ldC5uZXQ8L3NhbWw6SXNzdWVyPjxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiAvPjxTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiIC8+PFJlZmVyZW5jZSBVUkk9IiNfYjY1MDY3NjgtNGExZS00NmYzLTk0NWEtYTQwNWJjMTI5Mjc3Ij48VHJhbnNmb3Jtcz48VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiIC8+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgLz48L1RyYW5zZm9ybXM+PERpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIgLz48RGlnZXN0VmFsdWU+aW9LWUNHc3RUb2dhTm9rWUNDeUt5dHh3MnAwRHkwSkc2TjZGL2s3TngvST08L0RpZ2VzdFZhbHVlPjwvUmVmZXJlbmNlPjwvU2lnbmVkSW5mbz48U2lnbmF0dXJlVmFsdWU+UGR0MlVueTIrSjA5UTQ5WXhwT0pOcGg1c0I2UU0yYjRYSkJGOWx5VlVlWC9EZEh0M1JLamJ5eFJKUzVVRUthSlA1QkJhRncyUHBFUWpjYkQ3a29ENzNZVVRpaFIzWnhQY3owQmNuQlU2dlc2R0NpUG1XcGFBMFBHVjJCVW13L3NHOHV3WCtSS05HWFZzSjN2cWdsZGVSK1laeVhTRGNnSW9TMzNRc3plaFMzZStQcEZ2L252dlk5S29uQ2RsRTR2UnlGMC83S2VCNXdzcHBCbTF2NEMvYkJNSkVka0pwT2tQTDA4Q3NaNG5QeW9pcEdVSWdKT0kyTXZBNnNFQXcvZHhsMzVtcWhwanZmeHVNdnkvT2o2Z0pRZytSdEwybFpjU3hLYzNvUkV4ZjhLTDJ2SmtpK0VsazAzYjVHcEZCUDVXdFZGcjVsVDFkZDZTMmNrbFAyNFpBPT08L1NpZ25hdHVyZVZhbHVlPjxLZXlJbmZvPjxYNTA5RGF0YT48WDUwOUNlcnRpZmljYXRlPk1JSUVTVENDQXpHZ0F3SUJBZ0lKQUxxTUdVUmJxUVhZTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUc1TVFzd0NRWURWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lTV3hzYVc1dmFYTXhFREFPQmdOVkJBY01CME5vYVdOaFoyOHhKREFpQmdOVkJBb01HMUJ5WldabGNuSmxaQ0JJYjNSbGJDQkhjbTkxY0N3Z1NXNWpMakVMTUFrR0ExVUVDd3dDU1ZReEp6QWxCZ05WQkFNTUhuQnlaV1psY25KbFpHaHZkR1ZzY3kxM1pXSmliV0Z6YjI0dGMyRnRiREVwTUNjR0NTcUdTSWIzRFFFSkFSWWFhWFJvWld4d1FIQnlaV1psY25KbFpHaHZkR1ZzY3k1amIyMHdJQmNOTWpBd01URTBNak16TlRVMldoZ1BNakExTURBeU1qVXlNek0xTlRaYU1JRzVNUXN3Q1FZRFZRUUdFd0pWVXpFUk1BOEdBMVVFQ0F3SVNXeHNhVzV2YVhNeEVEQU9CZ05WQkFjTUIwTm9hV05oWjI4eEpEQWlCZ05WQkFvTUcxQnlaV1psY25KbFpDQkliM1JsYkNCSGNtOTFjQ3dnU1c1akxqRUxNQWtHQTFVRUN3d0NTVlF4SnpBbEJnTlZCQU1NSG5CeVpXWmxjbkpsWkdodmRHVnNjeTEzWldKaWJXRnpiMjR0YzJGdGJERXBNQ2NHQ1NxR1NJYjNEUUVKQVJZYWFYUm9aV3h3UUhCeVpXWmxjbkpsWkdodmRHVnNjeTVqYjIwd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURKd2hGVDU5N0hCckxvS0o5b1IrQVF3a0dUTXdHYkpHdFR3VkVYeGoyNlZUcVd2NVc3RkpFenpUOTQvOExGWmpQdDFKemQ4c2JVR2tsem1PZXM3RXBtWHFLQmJwNHJVdWk5ek93UjRHUGNLTDlLRi92UEx6R3RBUHFiSkdZMkFQdmt5ZGhZZC9KYlFFbi94TkxZL2Vlb1NEQ2F1T3hydDUybGhrRW82aDJMSXFkeVFGeVBEWGs1SjZwc3ErNnZFWTd0N3VxL0t0YlNGRi9sYVkydDJRV3V1azUzRjh0akJPZXpmL0hTMHdxd1ZuMlZkUXZvNG9kUkFyVGpwb1haeDNOWUwrb2VEcjV6N0VHUVhwUFN5OUYxaXVSZEVId2piMHRzS0M4TmoxTmdETlVlWW5wYnB5dDg3ZXVtUzN3VjU3Rjh6T1JiczZ2QldMT1JVKzkrSklTZEFnTUJBQUdqVURCT01CMEdBMVVkRGdRV0JCUmF2NVdZaldYR1d0ZEY1aUdjbzg0TEErUUZyVEFmQmdOVkhTTUVHREFXZ0JSYXY1V1lqV1hHV3RkRjVpR2NvODRMQStRRnJUQU1CZ05WSFJNRUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCZHk5eFNVa0RGcSsxSlY1T0lCNXpSTWR4NXRMOE1BdCs1RXpVSHZBRTV5VzEzdkQ2ZkRqWmg3cTVUR2FKdlRycVdVVG5SZEVON0xMMmlkeUlBSHpqTyt3NnZqUTlBNDVRTTRudnZmc1ZZVmhEdnBVa3N1Q093akNQdE8rVEgxdlYwU3JsZytpaFVkTmhQMzY3SmRzbWg2VmdTbnBlNlNEMHBtN1NEeGJJWXZlVU9Ma0lscVBFdmF1MC9ScGhZRHMrZERPZTJhZWFVUUtpaFRoZjQ5aDQrNGdOaUpvMit3LzVSb0dmVHNMZ2cyRTJuTlM4OVNWa3FrU29hYm1pa3NPMzY4MGNSMWk2bnFIQ3pLMnJTRERlSnpqVExNSi9wYXVQZjJqZnRNdVNDSnVTTllkMUZkNmYzSEt4ZUpRODRwbHVaTnAvdzdnY1labGlVM0JmMjN1bHI8L1g1MDlDZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1NpZ25hdHVyZT48c2FtbDpTdWJqZWN0PjxzYW1sOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIj5oYXJpbmR1QHN1cmdlLmdsb2JhbDwvc2FtbDpOYW1lSUQ+PHNhbWw6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb25EYXRhIFJlY2lwaWVudD0iaHR0cHM6Ly9kZXYyLWF1dGgtYW1pY2Fjb3JwLnN1cmdlLnRvb2xzL3JlYWxtcy9waGcvYnJva2VyL1ByZWZlcnJlZE5ldC9lbmRwb2ludCIgSW5SZXNwb25zZVRvPSJzdXJnZSIgTm90T25PckFmdGVyPSIyMDI0LTAzLTIwVDA4OjA3OjU3LjQzMzVaIiAvPjwvc2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDpTdWJqZWN0PjxzYW1sOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDI0LTAzLTIwVDA3OjUyOjU3LjQzMzVaIiBOb3RPbk9yQWZ0ZXI9IjIwMjQtMDMtMjBUMDg6MDc6NTcuNDMzNVoiPjxzYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWw6QXVkaWVuY2U+aHR0cHM6Ly9kZXYyLWF1dGgtYW1pY2Fjb3JwLnN1cmdlLnRvb2xzL3JlYWxtcy9waGc8L3NhbWw6QXVkaWVuY2U+PC9zYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sOkNvbmRpdGlvbnM+PHNhbWw6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDI0LTAzLTIwVDA3OjUyOjU3LjQzMzVaIiBTZXNzaW9uSW5kZXg9Il9iNjUwNjc2OC00YTFlLTQ2ZjMtOTQ1YS1hNDA1YmMxMjkyNzciPjxzYW1sOkF1dGhuQ29udGV4dD48c2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3Nlczp1bnNwZWNpZmllZDwvc2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWw6QXV0aG5Db250ZXh0Pjwvc2FtbDpBdXRoblN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWw6QXR0cmlidXRlIE5hbWU9IkVtYWlsIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHNkOnN0cmluZyI+aGFyaW5kdUBzdXJnZS5nbG9iYWw8L3NhbWw6QXR0cmlidXRlVmFsdWU+PC9zYW1sOkF0dHJpYnV0ZT48c2FtbDpBdHRyaWJ1dGUgTmFtZT0iRmlyc3RfTmFtZSIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzZDpzdHJpbmciPkhhcmluZHU8L3NhbWw6QXR0cmlidXRlVmFsdWU+PC9zYW1sOkF0dHJpYnV0ZT48c2FtbDpBdHRyaWJ1dGUgTmFtZT0icHJvcGVydGllcyIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzZDpzdHJpbmciPlBIR1RFU1Q8L3NhbWw6QXR0cmlidXRlVmFsdWU+PC9zYW1sOkF0dHJpYnV0ZT48L3NhbWw6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDpBc3NlcnRpb24+PC9SZXNwb25zZT4=");
    formData.append('RelayState', state);

    console.log('formData ', formData)
    try {
        const response = await axios.post('http://keycloak:8080/realms/phg/broker/PreferredNet/endpoint', formData, {
                headers: req.headers
            }
        );

        console.log('response headers', response.headers)
        console.log('response data', response.data)
        // Forward Keycloak response to client
        res.headers = response.headers;
        res.status(response.status).send(response?.data);
    } catch (e) {
        console.log('error', e);
        if (e?.response?.headers) {
            res.headers = e.response.headers;
        }

        res.status(e?.response.status).send(e.response.data);
    }

});
