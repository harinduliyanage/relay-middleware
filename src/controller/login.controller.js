import {catchAsync} from "../utils/catchAsync";
import {pick} from "../utils/pick";
import axios from "axios";

let state = "";

export const login = catchAsync(async (req, res) => {
    const {client_id, tab_id, session_code} = pick(req.query, ["client_id", "tab_id", "session_code"]);
    //
    const config = {
        headers: req.headers,
        maxRedirects: 0,
        validateStatus: status => {
            return status === 200 || status === 302 || status === 301;
        }
    };

    const response = await axios
        .get(`http://keycloak:8080/realms/phg/broker/PreferredNet/login?client_id=${client_id}&tab_id=${tab_id}&session_code=${session_code}`,
            config);

    const locationHeader = response.headers['location'];
    if (locationHeader) {
        const urlParams = new URLSearchParams(locationHeader.substring(locationHeader.indexOf('?') + 1));
        state = urlParams.get('RelayState');
    }
    console.log('current state:', state);
    res.redirect(301, locationHeader);
});


export const ssoCallBack = catchAsync(async (req, res) => {
    //
    console.log('req - h', req.headers)
    console.log('req', req.body)
    const {SAMLResponse} = req.body;

    const amendedRes = "PFJlc3BvbnNlIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiAgICAgICAgICB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIKICAgICAgICAgIElEPSJqbEY3U1poYlltZFJQWVpITUwxVCIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMjQtMDMtMjJUMDQ6Mjg6MTMuNTQzWiIKICAgICAgICAgIERlc3RpbmF0aW9uPSJodHRwczovL2RldjItYXV0aC1hbWljYWNvcnAuc3VyZ2UudG9vbHMvcmVhbG1zL3BoZy9icm9rZXIvUHJlZmVycmVkTmV0L2VuZHBvaW50IgogICAgICAgICAgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgSW5SZXNwb25zZVRvPSJJRF80ZjY2NzRlYS0xYTgyLTQ4ZDgtYmJkZi1kOWVlYjM2NDY4ZTgiPgogICAgPHNhbWw6SXNzdWVyPmh0dHBzOi8vUHJlZmVycmVkTmV0Lm5ldDwvc2FtbDpJc3N1ZXI+CiAgICA8U3RhdHVzPgogICAgICAgIDxTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz4KICAgIDwvU3RhdHVzPgogICAgPHNhbWw6QXNzZXJ0aW9uIFZlcnNpb249IjIuMCIgSUQ9Il83ZWI1YTdkYy01MGJmLTQ2NzUtYWFlYy0wYTlhMDk3NjEzZTUiIElzc3VlSW5zdGFudD0iMjAyNC0wMy0yMlQwNDoyODoxMy41NDNaIj4KICAgICAgICA8c2FtbDpJc3N1ZXI+aHR0cHM6Ly9QcmVmZXJyZWROZXQubmV0PC9zYW1sOklzc3Vlcj4KICAgICAgICA8U2lnbmF0dXJlIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KICAgICAgICAgICAgPFNpZ25lZEluZm8+CiAgICAgICAgICAgICAgICA8Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgogICAgICAgICAgICAgICAgPFJlZmVyZW5jZSBVUkk9IiNfN2ViNWE3ZGMtNTBiZi00Njc1LWFhZWMtMGE5YTA5NzYxM2U1Ij4KICAgICAgICAgICAgICAgICAgICA8VHJhbnNmb3Jtcz4KICAgICAgICAgICAgICAgICAgICAgICAgPFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KICAgICAgICAgICAgICAgICAgICA8L1RyYW5zZm9ybXM+CiAgICAgICAgICAgICAgICAgICAgPERpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxEaWdlc3RWYWx1ZT5WcFhpazBjcHlJdXpqVHp1N0h0WjBhSENnVDVVL1V4M1I0NlNqUThFZS9BPTwvRGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L1JlZmVyZW5jZT4KICAgICAgICAgICAgPC9TaWduZWRJbmZvPgogICAgICAgICAgICA8U2lnbmF0dXJlVmFsdWU+CiAgICAgICAgICAgICAgICBmRjVkUUtrR1pZendWdHZQL1hHbjlzdW1kTEx1aG5VbEdwYXkrS1ptQkhHUWtLSHBKdExjQ05oQ2l4cDBZR0U3YmFGUEZxWFh3bHN0LzNVd1NINStuSnFEVld6RGdKZ3JYQ2dPdGkvZUV1ajRWMzJnK05pRXRmKzRlZ2VvQkd5cHVpQUpza3VyenBaNkhKbUVoMnVQMFdiaFJnV2lXaHRrRExlbHQ3VUN4cWlzZ1c5VVJ4ZkVXclhVSWg1cWlKMUxWN0U2OUxZeEFEYk1TV01RbXBVUG4zaG5XTU1VbWIxOGpHNDNyN3liNUIxb0tWNVg1OUpCZVZEN1NEQkMrdjNWV1A1OVlnOVVVL3ZSY01qMkFuUGtKa20vNVlONi9mQzJiM1pha0s1Z2g0alFjRXdqZzBMUDZ5WkNNL2dnSlhzR1MvVTBSd25JVW5GK1pvcFJUeHcwN2c9PQogICAgICAgICAgICA8L1NpZ25hdHVyZVZhbHVlPgogICAgICAgICAgICA8S2V5SW5mbz4KICAgICAgICAgICAgICAgIDxYNTA5RGF0YT4KICAgICAgICAgICAgICAgICAgICA8WDUwOUNlcnRpZmljYXRlPgogICAgICAgICAgICAgICAgICAgICAgICBNSUlFU1RDQ0F6R2dBd0lCQWdJSkFMcU1HVVJicVFYWU1BMEdDU3FHU0liM0RRRUJDd1VBTUlHNU1Rc3dDUVlEVlFRR0V3SlZVekVSTUE4R0ExVUVDQXdJU1d4c2FXNXZhWE14RURBT0JnTlZCQWNNQjBOb2FXTmhaMjh4SkRBaUJnTlZCQW9NRzFCeVpXWmxjbkpsWkNCSWIzUmxiQ0JIY205MWNDd2dTVzVqTGpFTE1Ba0dBMVVFQ3d3Q1NWUXhKekFsQmdOVkJBTU1IbkJ5WldabGNuSmxaR2h2ZEdWc2N5MTNaV0ppYldGemIyNHRjMkZ0YkRFcE1DY0dDU3FHU0liM0RRRUpBUllhYVhSb1pXeHdRSEJ5WldabGNuSmxaR2h2ZEdWc2N5NWpiMjB3SUJjTk1qQXdNVEUwTWpNek5UVTJXaGdQTWpBMU1EQXlNalV5TXpNMU5UWmFNSUc1TVFzd0NRWURWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lTV3hzYVc1dmFYTXhFREFPQmdOVkJBY01CME5vYVdOaFoyOHhKREFpQmdOVkJBb01HMUJ5WldabGNuSmxaQ0JJYjNSbGJDQkhjbTkxY0N3Z1NXNWpMakVMTUFrR0ExVUVDd3dDU1ZReEp6QWxCZ05WQkFNTUhuQnlaV1psY25KbFpHaHZkR1ZzY3kxM1pXSmliV0Z6YjI0dGMyRnRiREVwTUNjR0NTcUdTSWIzRFFFSkFSWWFhWFJvWld4d1FIQnlaV1psY25KbFpHaHZkR1ZzY3k1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFESndoRlQ1OTdIQnJMb0tKOW9SK0FRd2tHVE13R2JKR3RUd1ZFWHhqMjZWVHFXdjVXN0ZKRXp6VDk0LzhMRlpqUHQxSnpkOHNiVUdrbHptT2VzN0VwbVhxS0JicDRyVXVpOXpPd1I0R1BjS0w5S0YvdlBMekd0QVBxYkpHWTJBUHZreWRoWWQvSmJRRW4veE5MWS9lZW9TRENhdU94cnQ1Mmxoa0VvNmgyTElxZHlRRnlQRFhrNUo2cHNxKzZ2RVk3dDd1cS9LdGJTRkYvbGFZMnQyUVd1dWs1M0Y4dGpCT2V6Zi9IUzB3cXdWbjJWZFF2bzRvZFJBclRqcG9YWngzTllMK29lRHI1ejdFR1FYcFBTeTlGMWl1UmRFSHdqYjB0c0tDOE5qMU5nRE5VZVlucGJweXQ4N2V1bVMzd1Y1N0Y4ek9SYnM2dkJXTE9SVSs5K0pJU2RBZ01CQUFHalVEQk9NQjBHQTFVZERnUVdCQlJhdjVXWWpXWEdXdGRGNWlHY284NExBK1FGclRBZkJnTlZIU01FR0RBV2dCUmF2NVdZaldYR1d0ZEY1aUdjbzg0TEErUUZyVEFNQmdOVkhSTUVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmR5OXhTVWtERnErMUpWNU9JQjV6Uk1keDV0TDhNQXQrNUV6VUh2QUU1eVcxM3ZENmZEalpoN3E1VEdhSnZUcnFXVVRuUmRFTjdMTDJpZHlJQUh6ak8rdzZ2alE5QTQ1UU00bnZ2ZnNWWVZoRHZwVWtzdUNPd2pDUHRPK1RIMXZWMFNybGcraWhVZE5oUDM2N0pkc21oNlZnU25wZTZTRDBwbTdTRHhiSVl2ZVVPTGtJbHFQRXZhdTAvUnBoWURzK2RET2UyYWVhVVFLaWhUaGY0OWg0KzRnTmlKbzIrdy81Um9HZlRzTGdnMkUybk5TODlTVmtxa1NvYWJtaWtzTzM2ODBjUjFpNm5xSEN6SzJyU0REZUp6alRMTUovcGF1UGYyamZ0TXVTQ0p1U05ZZDFGZDZmM0hLeGVKUTg0cGx1Wk5wL3c3Z2NZWmxpVTNCZjIzdWxyCiAgICAgICAgICAgICAgICAgICAgPC9YNTA5Q2VydGlmaWNhdGU+CiAgICAgICAgICAgICAgICA8L1g1MDlEYXRhPgogICAgICAgICAgICA8L0tleUluZm8+CiAgICAgICAgPC9TaWduYXR1cmU+CiAgICAgICAgPHNhbWw6U3ViamVjdD4KICAgICAgICAgICAgPHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPmhhcmluZHVAc3VyZ2UuZ2xvYmFsCiAgICAgICAgICAgIDwvc2FtbDpOYW1lSUQ+CiAgICAgICAgICAgIDxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj4KICAgICAgICAgICAgICAgIDxzYW1sOlN1YmplY3RDb25maXJtYXRpb25EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgIFJlY2lwaWVudD0iaHR0cHM6Ly9kZXYyLWF1dGgtYW1pY2Fjb3JwLnN1cmdlLnRvb2xzL3JlYWxtcy9waGcvYnJva2VyL1ByZWZlcnJlZE5ldC9lbmRwb2ludCIKICAgICAgICAgICAgICAgICAgICAgICAgSW5SZXNwb25zZVRvPSJzdXJnZSIgTm90T25PckFmdGVyPSIyMDI0LTAzLTIyVDA0OjQzOjEzLjU0M1oiLz4KICAgICAgICAgICAgPC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+CiAgICAgICAgPC9zYW1sOlN1YmplY3Q+CiAgICAgICAgPHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjQtMDMtMjJUMDQ6Mjg6MTMuNTQzWiIgTm90T25PckFmdGVyPSIyMDI0LTAzLTIyVDA0OjQzOjEzLjU0M1oiPgogICAgICAgICAgICA8c2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPgogICAgICAgICAgICAgICAgPHNhbWw6QXVkaWVuY2U+aHR0cHM6Ly9kZXYyLWF1dGgtYW1pY2Fjb3JwLnN1cmdlLnRvb2xzL3JlYWxtcy9waGc8L3NhbWw6QXVkaWVuY2U+CiAgICAgICAgICAgIDwvc2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPgogICAgICAgIDwvc2FtbDpDb25kaXRpb25zPgogICAgICAgIDxzYW1sOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAyNC0wMy0yMlQwNDoyODoxMy41NDNaIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlc3Npb25JbmRleD0iXzdlYjVhN2RjLTUwYmYtNDY3NS1hYWVjLTBhOWEwOTc2MTNlNSI+CiAgICAgICAgICAgIDxzYW1sOkF1dGhuQ29udGV4dD4KICAgICAgICAgICAgICAgIDxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkCiAgICAgICAgICAgICAgICA8L3NhbWw6QXV0aG5Db250ZXh0Q2xhc3NSZWY+CiAgICAgICAgICAgIDwvc2FtbDpBdXRobkNvbnRleHQ+CiAgICAgICAgPC9zYW1sOkF1dGhuU3RhdGVtZW50PgogICAgICAgIDxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD4KICAgICAgICAgICAgPHNhbWw6QXR0cmlidXRlIE5hbWU9IkVtYWlsIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj4KICAgICAgICAgICAgICAgIDxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4c2Q6c3RyaW5nIj5oYXJpbmR1QHN1cmdlLmdsb2JhbDwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT4KICAgICAgICAgICAgPC9zYW1sOkF0dHJpYnV0ZT4KICAgICAgICAgICAgPHNhbWw6QXR0cmlidXRlIE5hbWU9IkZpcnN0X05hbWUiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPgogICAgICAgICAgICAgICAgPHNhbWw6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzZDpzdHJpbmciPkhhcmluZHU8L3NhbWw6QXR0cmlidXRlVmFsdWU+CiAgICAgICAgICAgIDwvc2FtbDpBdHRyaWJ1dGU+CiAgICAgICAgICAgIDxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJwcm9wZXJ0aWVzIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj4KICAgICAgICAgICAgICAgIDxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4c2Q6c3RyaW5nIj5QSEdURVNUPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPgogICAgICAgICAgICA8L3NhbWw6QXR0cmlidXRlPgogICAgICAgIDwvc2FtbDpBdHRyaWJ1dGVTdGF0ZW1lbnQ+CiAgICA8L3NhbWw6QXNzZXJ0aW9uPgo8L1Jlc3BvbnNlPgo=";
    // Prepare form data payload for Axios request to Keycloak
    const formData = new URLSearchParams();
    formData.append('SAMLResponse', amendedRes);
    formData.append('RelayState', state);

    console.log('formData ', formData)
    try {
        const response = await axios.post('http://keycloak:8080/realms/phg/broker/PreferredNet/endpoint', formData, {
                headers: req.headers
            }
        );

        console.log('response headers', response.headers)
        console.log('response data', response.data)
        // Forward Keycloak response to client
        res.headers = response.headers;
        res.status(response.status).send(response?.data);
    } catch (e) {
        console.log('error', e);
        if (e?.response?.headers) {
            res.headers = e.response.headers;
        }

        res.status(e?.response.status).send(e.response.data);
    }

});
